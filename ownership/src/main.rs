/*
Rust 所有権について
Rustの各値は所有者という変数と対応している
いかなる時も所有者は1つ
所有者がスコープから外れたら、値は破棄される
スコープを抜ける際に特別な関数を呼ぶ。drop

ムーブ
Rustでは、同じヒープを参照する変数というのは存在しない
S1 = S2とすると、S1の参照はなくなり、S2からの参照のみとなる。
スコープを同時に抜ける場合に、2回dropされないため。

ヒープではなくスタックに記録されるデータ(基本的なデータ型)はムーブではなくコピーされる

関数で引数として変数を受け取る場合もムーブ扱いとされる。
参照だけ受け取りたい場合は、引数の型の前に&をつける
参照を受け取ることを借用という。
借用した参照はそのままでは変更できない。
mutを変数、引数どちらにもつければ変更可能。

mutをつけた参照(可変な参照)は、1つのスコープで1つの変数に付き1回しかできない。
また、可変な参照は、不変な参照を持つ変数に対しては行えない。

文字列スライス
文字列の参照の一部を取り出すことができる
*/
fn main() {
    let s = String::from("hello world");

    let word = first_word(&s);

    println!("{}",word);
}

fn first_word(s : &String) -> &str {
    let bytes = s.as_bytes();

    for(i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}
